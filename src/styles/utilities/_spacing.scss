// Breakpoints map
$grid-breakpoints: (
  sm: 480px,
  md: 768px,
  lg: 1200px
);

// Spacing values map
$spacing-values: (
  0: 0,
  1: 0.25rem,
  2: 0.5rem,
  3: 0.75rem,
  4: 1rem,
  5: 1.25rem,
  6: 1.5rem,
  8: 2rem
);

// Media query mixin
@mixin media-breakpoint-up($breakpoint) {
  @if map-has-key($grid-breakpoints, $breakpoint) {
    @media (min-width: map-get($grid-breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @error "Invalid breakpoint: '#{$breakpoint}'.";
  }
}

// Spacing mixin for component-specific use
@mixin spacing($property, $direction: null, $value: null) {
  @if map-has-key($spacing-values, $value) {
    @if $direction != null {
      #{$property}-#{$direction}: map-get($spacing-values, $value);
    } @else {
      #{$property}: map-get($spacing-values, $value);
    }
  } @else {
    @error "Invalid spacing value '#{$value}'. Use one of: #{map-keys($spacing-values)}.";
  }
}

// Function to get spacing value
@function spacing($key) {
  @if map-has-key($spacing-values, $key) {
    @return map-get($spacing-values, $key);
  }
  @error "Invalid spacing value '#{$key}'. Use one of: #{map-keys($spacing-values)}.";
}

// Generate base utility classes
@each $key, $value in $spacing-values {
  // Margin utilities
  .u-m-#{$key} { margin: $value !important; }
  .u-mt-#{$key} { margin-top: $value !important; }
  .u-mr-#{$key} { margin-right: $value !important; }
  .u-mb-#{$key} { margin-bottom: $value !important; }
  .u-ml-#{$key} { margin-left: $value !important; }
  .u-mx-#{$key} { 
    margin-left: $value !important;
    margin-right: $value !important;
  }
  .u-my-#{$key} {
    margin-top: $value !important;
    margin-bottom: $value !important;
  }

  // Padding utilities
  .u-p-#{$key} { padding: $value !important; }
  .u-pt-#{$key} { padding-top: $value !important; }
  .u-pr-#{$key} { padding-right: $value !important; }
  .u-pb-#{$key} { padding-bottom: $value !important; }
  .u-pl-#{$key} { padding-left: $value !important; }
  .u-px-#{$key} {
    padding-left: $value !important;
    padding-right: $value !important;
  }
  .u-py-#{$key} {
    padding-top: $value !important;
    padding-bottom: $value !important;
  }

  // Gap utilities
  .u-gap-#{$key} { gap: $value !important; }
  .u-gap-x-#{$key} { column-gap: $value !important; }
  .u-gap-y-#{$key} { row-gap: $value !important; }
}

// Generate responsive utility classes
@each $breakpoint, $min-width in $grid-breakpoints {
  @include media-breakpoint-up($breakpoint) {
    @each $key, $value in $spacing-values {
      // Responsive margin utilities
      .u-m-#{$breakpoint}-#{$key} { margin: $value !important; }
      .u-mt-#{$breakpoint}-#{$key} { margin-top: $value !important; }
      .u-mr-#{$breakpoint}-#{$key} { margin-right: $value !important; }
      .u-mb-#{$breakpoint}-#{$key} { margin-bottom: $value !important; }
      .u-ml-#{$breakpoint}-#{$key} { margin-left: $value !important; }
      .u-mx-#{$breakpoint}-#{$key} { 
        margin-left: $value !important;
        margin-right: $value !important;
      }
      .u-my-#{$breakpoint}-#{$key} {
        margin-top: $value !important;
        margin-bottom: $value !important;
      }

      // Responsive padding utilities
      .u-p-#{$breakpoint}-#{$key} { padding: $value !important; }
      .u-pt-#{$breakpoint}-#{$key} { padding-top: $value !important; }
      .u-pr-#{$breakpoint}-#{$key} { padding-right: $value !important; }
      .u-pb-#{$breakpoint}-#{$key} { padding-bottom: $value !important; }
      .u-pl-#{$breakpoint}-#{$key} { padding-left: $value !important; }
      .u-px-#{$breakpoint}-#{$key} {
        padding-left: $value !important;
        padding-right: $value !important;
      }
      .u-py-#{$breakpoint}-#{$key} {
        padding-top: $value !important;
        padding-bottom: $value !important;
      }

      // Responsive gap utilities
      .u-gap-#{$breakpoint}-#{$key} { gap: $value !important; }
      .u-gap-x-#{$breakpoint}-#{$key} { column-gap: $value !important; }
      .u-gap-y-#{$breakpoint}-#{$key} { row-gap: $value !important; }
    }
  }
} 