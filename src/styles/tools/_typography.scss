@use '../settings/typography' as t;
@use '../settings/breakpoints' as b;

// Main typography mixin that applies all token properties
@mixin typography($token, $responsive: false) {
  $token-map: t.get-typography-token($token);
  
  font-size: map-get($token-map, font-size);
  line-height: map-get($token-map, line-height);
  font-weight: map-get($token-map, font-weight);
  letter-spacing: map-get($token-map, letter-spacing);
  
  @if map-has-key($token-map, font-family) {
    font-family: map-get($token-map, font-family);
  }

  @if $responsive {
    @each $breakpoint, $min-width in b.$breakpoints {
      @media (min-width: $min-width) {
        $scale: 1;
        @if $breakpoint == 'md' { $scale: 1.1; }
        @if $breakpoint == 'lg' { $scale: 1.2; }
        font-size: map-get($token-map, font-size) * $scale;
      }
    }
  }
}

// Individual property mixins that use token values
@mixin font-size($token) {
  font-size: t.get-typography-value($token, font-size);
}

@mixin line-height($token) {
  line-height: t.get-typography-value($token, line-height);
}

@mixin font-weight($token) {
  font-weight: t.get-typography-value($token, font-weight);
}

@mixin letter-spacing($token) {
  letter-spacing: t.get-typography-value($token, letter-spacing);
}

// Text alignment mixin
@mixin text-align($alignment) {
  text-align: $alignment;
}

// Line clamp mixin
@mixin line-clamp($lines) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Text truncate mixin
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Font family mixin
@mixin font-family($token) {
  @if map-has-key(t.get-typography-token($token), font-family) {
    font-family: t.get-typography-value($token, font-family);
  } @else {
    font-family: t.$font-family-primary;
  }
}

// Text transform mixin
@mixin text-transform($transform) {
  text-transform: $transform;
} 